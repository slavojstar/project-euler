# For which value of p â‰¤ 1000, is the number of solutions (a, b, c) maximised?
# (where p is the perimeter of a right angle triangle, and (a, b, c) is a
# pythagorean triplet)

import Utilities

def FindIntegerRightTriangles():
	# Going through the cases in which a and b are even
	# and odd, we find that p has to be even. 

	# Pythagorean triplets can be generated by the following:
	# k(m^2 - n^2, 2mn, m^2 + n^2)
	# Where k, m, and n are natural numbers and not 0
	# and m > n

	# We then find that p = 2km(m + n), so we need to find
	# all viable m and n such that the above formula is true.
	# We search through the space of all the values of p / 2.

	maxLenPyTri = 0
	maxP = 0

	for p in range(1, 501):
		pyTris = set()
		facP = Utilities.ProperFactorsOf(p)
		for k in facP:
			newP = int(p / k)
			newFacP = Utilities.ProperFactorsOf(newP)
			for m in newFacP:
				l = int(newP / m)
				n = l - m
				if n < m and n > 0:
					a = k * (m ** 2 - n ** 2)
					b = 2 * k * m * n
					c = k * (m ** 2 + n ** 2)
					triplet = [a, b, c]
					triplet.sort()
					triplet = str(triplet)
					pyTris.add(triplet)
		if len(pyTris) > maxLenPyTri:
			maxLenPyTri = len(pyTris)
			maxP = p
	print(2 * maxP)
	return 2 * maxP

FindIntegerRightTriangles()

# Returns 840









